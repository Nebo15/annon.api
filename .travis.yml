language: elixir
sudo: required
cache:
  directories:
  - deps
services:
  - docker
  - postgresql
addons:
  postgresql: "9.5"
elixir:
  - 1.3.0
otp_release:
  - 19.0
env:
  global:
    - MIX_ENV=test
    - DOCKER_HUB_ACCOUNT=place_your_account_name_here
    - MAIN_BRANCHES="master develop staging" # Branches on which you want version to be incremented
    - RELEASE_BRANCH="master"
    - COVERALLS_REPO_TOKEN=cgG2HzcgLtSNdXmuIP9BarEdCFx9ePTPY
    # Docker credentials
    - secure: "..."
branches:
  # Releases are generated automatically, stop infinite build loop
  except:
    - /[0-9]*\.[0-9]*\.[0-9]*/
before_install:
  # Expose DB to Docker container
  - sudo /bin/bash ./bin/ci/init-db.sh
  - sudo apt-get install -y nodejs
  - sudo apt-get install -y git
  - sudo git clone https://github.com/etsy/statsd.git
  - cd statsd
  - sudo echo '{port: 8125, mgmt_port: 8126, backends: ["./backends/console"]}' > config.js
  - node stats.js config.js
script:
  # Increment version in mix.exs
  # Uncomment this if you want to increment patch version on each Travis build.
  # - "./bin/version-increment.sh"
  # Install dependencies
  - mix deps.get
  # Run all tests except pending ones
  - mix test --exclude pending --trace
  # Submit code coverage report to Coveralls
  # Add --pro if you using private repo.
  - mix coveralls.travis --pro
  # Run static code analysis
  - mix credo
  # Check code style
  - mix dogma
  # Build Docker container
  - "./bin/build.sh"
  # Initialize DB for Docker container
  - MIX_ENV=dev mix ecto.setup
  # Run Docker container
  - sudo ./bin/start.sh
  - sleep 5
  - docker ps
  - RUNNING_CONTAINERS=`docker ps | wc -l`;
  - if [ "${RUNNING_CONTAINERS//[[:space:]]/}" == "1" ]; then echo "[E] Container is not started!" exit 1; fi;
  # Run acceptance tests on Docker container
  #- "MIX_TEST_HOST=localhost MIX_TEST_PORT=4000 mix test test/acceptance"
# after_success:

# Also you can
# - automatically build images and push them to Docker Hub;
# - create new git tag with build version and GitHub release on it.
#
# To do so you need to encrypt your docker user name and password and add to environment variables:
#
#   $ travis encrypt DOCKER_USERNAME=sample_username DOCKER_PASSWORD=strong_password
#
# More info: https://docs.travis-ci.com/user/encryption-keys/
#
# Additionally should add env "DOCKER_HUB_ACCOUNT=org_name" to set Hub's organization or account that will hold images.
# Sample:
#
#   env:
#     global:
#       - DOCKER_HUB_ACCOUNT=org_name # Docker Hub Account or Organization that will hold images
#       - secure: "encrypeted_credentials" # Encrypted credentials to login into Docker Hub
#
# Then uncomment following lines:
#
# after_success:
#   # Submit Docker container to Docker Hub and create GitHub Release by pushing tag with changelog
#   - ./bin/ci/push.sh
